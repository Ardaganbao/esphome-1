esphome:
  name: solarstation2
  platform: ESP32
  board: esp32dev

wifi:
  ssid: !secret wifi_sid
  password: !secret wifi_password
  use_address: espsolar.int.grasruck.net
  manual_ip:
    static_ip: 192.168.66.89
    gateway: 192.168.66.1
    subnet: 255.255.255.0
    dns1: 192.168.66.9

time:
  - platform: sntp
    id: sntp_time
    timezone: "CET-1CEST,M3.5.0,M10.5.0/3"
    servers: "192.168.66.45"

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

mqtt:
  broker: 192.168.66.114
#  on_message:
#    topic: ${unique_id}/ota_mode
#    payload: 'ON'
#    then:
#      - deep_sleep.prevent: deep_sleep_1

uart:
  id: mod_bus
  tx_pin: 25
  rx_pin: 27
  baud_rate: 115200
  stop_bits: 1

modbus:
  id: modbus_epsolar
  # ctrl_pin: 5    # if you need to set the driver enable (DE) pin high before transmitting data configure it here
  uart_id: mod_bus

### Note enabling all sensors will probably cause a stackoverflow
### https://github.com/esphome/issues/issues/855
sensor:
  - platform: modbus_component
    modbus_id: modbus_epsolar
    id: traceranx
    ## the Modbus device addr
    address: 0x1
    ## Any modbus registers not already implemented can be defined here
    ##
    sensors:
      - id: pv_input_voltage
        name: "PV array input voltage"
        address: 0x3100
        offset: 0
        unit_of_measurement: "V" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: pv_input_current
        name: "PV array input current"
        address: 0x3100
        offset: 1
        unit_of_measurement: "A" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: pv_input_power
        name: "PV array input power"
        address: 0x3100
        offset: 2
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_DOUBLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: battery_power
        name: "Battery power"
        address: 0x3100
        offset: 6
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_DOUBLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: load_voltage
        name: "Load voltage"
        address: 0x3100
        offset: 0xC
        unit_of_measurement: "V" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: load_current
        name: "Load Current"
        address: 0x3100
        offset: 0xD
        unit_of_measurement: "V" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: load_power
        name: "Load power"
        address: 0x3100
        offset: 0xE
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_DOUBLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: battery_temperature
        name: "Battery temperature"
        address: 0x3100
        offset: 0x10
        unit_of_measurement: °C ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: device_temperature
        name: "Device temperature"
        address: 0x3100
        offset: 0x11
        unit_of_measurement: °C ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: battery_soc
        name: "Battery SOC"
        address: 0x311A
        offset: 0
        unit_of_measurement: "%" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 1
        accuracy_decimals: 0

      - id: remote_battery_temperature
        name: "Remote battery temperature"
        address: 0x311A
        offset: 1
        unit_of_measurement: "°C" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_SINGLE
        scale_factor: 0.01
        accuracy_decimals: 1

      - id: length_of_night_hours
        address: 0x9065
        offset: 0
        unit_of_measurement: "h" ## for any other unit the value is returned in minutes
        name: "Length of night"
        modbus_functioncode: read_holding_registers
        value_type: U_SINGLE
        scale_factor: 1.0

    binary_sensors:
      - id: default_load_mode
        modbus_functioncode: read_holding_registers
        address: 0x906A
        offset: 0
        name: "Default Load On/Off"
        bitmask: 1
    update_interval: 30s
  # - platform: modbus_component
  #   id: modbase
  #   binary_sensors:
  #   - id: default_load_mode2
  #     modbus_functioncode: read_holding_registers
  #     address: 0x906A
  #     offset: 0
  #     name: 'Default Load On/Off 2'
  #     bitmask: 1
#        sensor:
#        - sensor1:
#          - offset: 1
#            name: max
#            value_type: 1
#        - sensor1:
#          - offset: 1
#            name: max
#            value_type: 1
#      - start_address: 0x3300
#        type: read_discrete_inputs
#        sensor:
#        - sensor1:
#          - offset: 1
#            name: max
#            value_type: 1
#        - sensor1:
#          - offset: 1
#            name: max
#            value_type: 1

#  ranges:
#  - start_address: '0x3100'
#    registerType: 0
#    sensor:
#     offset: 1
#     name: max
#     value_type: 1
#    binarysensor:
#      offset: 2
#      name: max
#      value_type: 1
