esphome:
  name: dc
  platform: ESP32
  board: esp32dev

wifi:
  ssid: !secret wifi_sid
  password: !secret wifi_password
  use_address: espsolar

time:
  - platform: sntp
    id: sntp_time
    timezone: "CET-1CEST,M3.5.0,M10.5.0/3"
    servers: "192.168.66.45"

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

mqtt:
  broker: 192.168.66.114
#  on_message:
#    topic: ${unique_id}/ota_mode
#    payload: 'ON'
#    then:
#      - deep_sleep.prevent: deep_sleep_1

uart:
  id: mod_bus
  tx_pin: 25
  rx_pin: 27
  baud_rate: 115200
  stop_bits: 1

modbus:
  id: modbus_epsolar
  # ctrl_pin: 5    # if you need to set the driver enable (DE) pin high before transmitting data configure it here
  uart_id: mod_bus

### Note enabling all sensors will probably cause a stackoverflow
### https://github.com/esphome/issues/issues/855
sensor:
  - platform: modbus_component
    modbus_id: modbus_epsolar
    command_throttle: 0
    id: traceranx
    ## the Modbus device addr
    address: 0x1
    ## Any modbus registers not already implemented can be defined here
    ##
    sensors:
      - id: pv_input_voltage
        name: "PV array input voltage"
        address: 0x3100
        offset: 0
        unit_of_measurement: "V" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        scale_factor: 0.01
        filters:
        - multiply: 1.0

      - id: pv_input_current
        name: "PV array input current"
        address: 0x3100
        offset: 2
        unit_of_measurement: "A" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        filters:
        - multiply: 0.01

      - id: pv_input_power
        name: "PV array input power"
        address: 0x3100
        offset: 4
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_DWORD_R
        accuracy_decimals: 1
        register_count: 2
        filters:
        - multiply: 0.01

      - id: pv_unknown1
        name: "pv_unknown1"
        address: 0x3100
        offset: 8
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        register_count: 1
        skip_updates: 5

      - id: pv_unknown2
        name: "pv_unknown2"
        address: 0x3100
        offset: 10
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        register_count: 1


      - id: battery_power
        name: "Battery power"
        address: 0x3100
        offset: 12
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_DWORD_R
        accuracy_decimals: 1
        register_count: 2
        skip_updates: 3
        filters:
        - multiply: 0.01

      
      - id: load_voltage
        name: "Load voltage"
        address: 0x310C
        offset: 0x0
        unit_of_measurement: "V" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        filters:
        - multiply: 0.01

      - id: load_current
        name: "Load Current"
        address: 0x310C
        offset: 0x2
        unit_of_measurement: "A" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        filters:
        - multiply: 0.01

      - id: load_power
        name: "Load power"
        address: 0x310C
        offset: 0x04
        unit_of_measurement: "W" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_DWORD_R
        accuracy_decimals: 1
        register_count: 2
        filters:
        - multiply: 0.01

      - id: battery_temperature
        name: "Battery temperature"
        address: 0x310C
        offset: 0x8
        unit_of_measurement: °C ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        filters:
        - multiply: 0.01

      - id: device_temperature
        name: "Device temperature"
        address: 0x310C
        offset: 0xA
        unit_of_measurement: °C ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        filters:
        - multiply: 0.01

      - id: battery_soc
        name: "Battery SOC"
        address: 0x311A
        offset: 0
        unit_of_measurement: "%" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 0

      - id: remote_battery_temperature
        name: "Remote battery temperature"
        address: 0x311A
        offset: 2
        unit_of_measurement: "°C" ## for any other unit the value is returned in minutes
        modbus_functioncode: "read_input_registers"
        value_type: U_WORD
        accuracy_decimals: 1
        filters:
        - multiply: 0.01

      - id: length_of_night_minutes
        address: 0x9065
        internal: true
        offset: 0
        bitmask: 0xFF
        unit_of_measurement: "m" ## for any other unit the value is returned in minutes
        name: "Length of night-mins"
        modbus_functioncode: read_holding_registers
        value_type: U_WORD

      - id: length_of_night
        address: 0x9065
        offset: 0
        bitmask: 0xFF00
        unit_of_measurement: "m" ## for any other unit the value is returned in minutes
        name: "Length of night"
        modbus_functioncode: read_holding_registers
        value_type: U_WORD
        filters:
        - lambda: return id(length_of_night_minutes).state  + ( 60 * x);
      
    binary_sensors:
      - id: default_load_mode
        modbus_functioncode: read_holding_registers
        address: 0x906A
        offset: 0
        name: "Default Load On/Off"
        bitmask: 1

    text_sensors:
      - name: "rtc_clock"
        id: rtc_clock
        modbus_functioncode: read_holding_registers
        address: 0x9013
        offset: 0
        register_count: 3
        hex_encode: true
        response_size: 6
#                /*
#                E20 Real time clock 9013 D7-0 Sec, D15-8 Min
#                E21 Real time clock 9014 D7-0 Hour, D15-8 Day
#                E22 Real time clock 9015 D7-0 Month, D15-8 Year
#                */
        on_value:
          then:
            - lambda: |-
                ESP_LOGV("main", "decoding rtc hex encoded raw data: %s", x.c_str());
                uint8_t h=0,m=0,s=0,d=0,month_=0,y = 0 ;
                m = esphome::modbus_component::hex_byte_from_str(x,0);
                s = esphome::modbus_component::hex_byte_from_str(x,1);
                d = esphome::modbus_component::hex_byte_from_str(x,2);
                h = esphome::modbus_component::hex_byte_from_str(x,3);
                y = esphome::modbus_component::hex_byte_from_str(x,4);
                month_ = esphome::modbus_component::hex_byte_from_str(x,5);
                char buffer[20];
                // format time as YYYY:mm:dd hh:mm:ss
                sprintf(buffer,"%04d:%02d:%02d %02d:%02d:%02d",y+2000,month_,d,h,m,s);
                id(template_rtc).publish_state(buffer);


#    switches:
#      - id: default_load_mode
#        modbus_functioncode: read_holding_registers
#        address: 0x906A
#        offset: 0
#        name: "Default Load On/Off"
#        bitmask: 1#

    update_interval: 10s

text_sensor:
   - platform: template
     name: "RTC Time Sensor"
     id: template_rtc

